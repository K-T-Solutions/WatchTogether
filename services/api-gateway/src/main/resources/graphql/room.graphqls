# room.graphqls

extend type Query {
    # Получение комнаты по ID
    getRoomById(roomId: ID!): RoomResponse

    # Получение комнаты по владельцу
    getRoomByOwnerId(ownerId: ID!): RoomResponse

    # Получение всех публичных комнат
    getAllPublicRooms: [RoomResponse]

    # Получение комнат по категории
    getRoomsByCategory(category: RoomCategory!): RoomListResponse!

    joinRoomByInvite(inviteCode: String!, userId: ID!): Boolean!
}

extend type Mutation {
    # Создание новой комнаты
    createRoom(input: CreateRoomRequest!): CreateRoomResponse!

    # Добавление участника в комнату
    addParticipantToRoom(roomId: ID!, participantId: ID!, password: String): Boolean

    # Удаление участника из комнаты
    removeParticipantFromRoom(roomId: ID!, participantId: ID!): Boolean

    generateInvitation(input: GenerateInvitationRequest!): GenerateInvitationResponse!

}

# ========== Основные типы ==========

type RoomResponse {
    roomId: ID!
    ownerId: ID!
    roomName: String!
    roomDescription: String
    roomType: RoomType!
    roomCategory: RoomCategory!
    maxParticipants: Int!
    needPassword: Boolean!
    participantsNumber: Int!
    createdAt:  String!
#    participantIds: [ID!]!
#    createdAt: String # ISO timestamp
#    status: RoomStatus!
#    # Дополнительные поля для UI
#    participantCount: Int!
#    canJoin: Boolean! # вычисляемое поле
}

type RoomListResponse {
    rooms: [RoomResponse!]!
#    totalCount: Int!
}

type CreateRoomResponse {
    success: Boolean!
    message: String
#    room: RoomResponse
    # Коды ошибок для более точной обработки
#    errorCode: CreateRoomErrorCode
}

type ParticipantResponse {
    success: Boolean
#    message: String
#    currentParticipantCount: Int
#    room: RoomResponse # возвращаем обновленную комнату
#    errorCode: ParticipantErrorCode
}

type GenerateInvitationResponse {
    success: Boolean!
    code: String
}

# ========== Входные типы ==========

input CreateRoomRequest {
    ownerId: ID!
    roomName: String!
    roomDescription: String
    roomType: RoomType!
    roomCategory: RoomCategory!
    roomPassword: String
    maxParticipants: Int! # Обязательное поле, 0 = unlimited
}

#input AddParticipantRequest {
#    roomId: ID!
#    participantId: ID!
#    password: String # если комната приватная
#}

input RemoveParticipantRequest {
    roomId: ID!
    participantId: ID!
}

input GenerateInvitationRequest {
    roomId: ID!
    creatorId: ID!
    durationSecs: Int
    maxUses: Int
}

# ========== Enums ==========

enum RoomCategory {
    MOVIES
    SERIES
    ANIME
    MUSIC
    GAMING
    EDUCATION
    SPORTS
    STAND_UP
    KIDS
    ART
    TRAVEL
    COOKING
    FASHION
    LIVE
    TESTING
    SOCIAL
    OTHER
    NONE
}

enum RoomType {
    PUBLIC
    PRIVATE
}

enum RoomStatus {
    ACTIVE
    PAUSED
    ENDED
}

# Коды ошибок для лучшего UX
enum CreateRoomErrorCode {
    INVALID_OWNER
    ROOM_NAME_TAKEN
    INVALID_CATEGORY
    TOO_MANY_PARTICIPANTS
    INSUFFICIENT_PERMISSIONS
}

enum ParticipantErrorCode {
    ROOM_NOT_FOUND
    PARTICIPANT_NOT_FOUND
    ROOM_FULL
    WRONG_PASSWORD
    ALREADY_PARTICIPANT
    NOT_PARTICIPANT
    INSUFFICIENT_PERMISSIONS
    ROOM_ENDED
}