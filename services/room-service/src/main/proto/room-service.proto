syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "com.watchtogether.grpc";
option java_outer_classname = "RoomServiceProto";

// Room service for managing watch-together rooms
service RoomService { //TODO: добавить получение по категории
  // Get room by ID
  rpc GetRoomById(GetRoomByIdRequest) returns (RoomResponse);

  // Get rooms owned by specific user
  rpc GetRoomByOwnerId(GetRoomByOwnerIdRequest) returns (RoomResponse);

  // Get all public rooms
  rpc GetAllPublicRooms(google.protobuf.Empty) returns (RoomListResponse);

  // Create new room
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse);

  // Add participant to room
  rpc AddParticipantToRoom(AddParticipantRequest) returns (AddParticipantResponse);

  // Remove participant from room
  rpc RemoveParticipantFromRoom(RemoveParticipantRequest) returns (RemoveParticipantResponse);
}

// Requests
message GetRoomByIdRequest {
  string room_id = 1;
}

message GetRoomByOwnerIdRequest {
  string owner_id = 1;
}

message CreateRoomRequest {
  string owner_id = 1;
  string room_name = 2;
  string room_description = 3;
  RoomType room_type = 4;
  RoomCategory category = 5;
  string room_password = 6;
  int32 max_participants = 7; // 0 = unlimited
}

message AddParticipantRequest {
  string room_id = 1;
  string participant_id = 2;
  string password = 3;
}

message RemoveParticipantRequest {
  string room_id = 1;
  string participant_id = 2;
}

// Responses
message RoomResponse {
  string room_id = 1;
  string owner_id = 2;
  string room_name = 3;
  string room_description = 4;
  RoomType room_type = 5;
  RoomCategory room_category = 6;
  int32 max_participants = 7;
  bool needPassword = 8;
  //  repeated string participant_ids = 8;
  //  google.protobuf.Timestamp created_at = 9;
  //  RoomStatus status = 10; // надо или нет?
}

message RoomListResponse {
  repeated RoomResponse rooms = 1;
  //  int32 total_count = 2;
}

message CreateRoomResponse {
  bool success = 1;
  string message = 2;
  //  RoomResponse room = 3; // populated if success = true
}

message AddParticipantResponse {
  bool success = 1;
  string message = 2;
  int32 current_participant_count = 3;
}

message RemoveParticipantResponse {
  bool success = 1;
  string message = 2;
  int32 current_participant_count = 3;
}

// Enums
enum RoomStatus {
  ROOM_STATUS_UNKNOWN = 0;
  ROOM_STATUS_ACTIVE = 1;
  ROOM_STATUS_PAUSED = 2;
  ROOM_STATUS_ENDED = 3;
}

enum RoomCategory {
  MOVIES = 0;
  SERIES = 1;
  ANIME = 2;
  MUSIC = 3;
  GAMING = 4;
  EDUCATION = 5;
  SPORTS = 6;
  STAND_UP = 7;
  KIDS = 8;
  ART = 9;
  TRAVEL = 10;
  COOKING = 11;
  FASHION = 12;
  LIVE = 13;
  TESTING = 14;
  SOCIAL = 15;
  OTHER = 16;
  NONE = 17;      // Другое
}

enum RoomType {
  PUBLIC = 0;
  PRIVATE = 1;
}
